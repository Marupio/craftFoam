/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      admInhibitionDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*
    The coefficient format, i.e.
        keyword     coefficient;
    can have any of these formats:
        keyword     coefficientName; // * [1] - see below
        keyword     scalar;
        keyword     [dimensionSet] scalar;
        keyword     ignoredWord [dimensionSet] scalar;
        keyword     "equation";
        keyword     [dimensionSet] "equation";
        keyword     ignoredWord [dimensionSet] "equation";
    * [1] - if the coefficient is already defined in admCoefficientDict.

inhibitionName
{
    type:
        type    nonCompetitive;
            // [I = K_I / (K_I + S_I)]
            K_I     coefficient;
            S_I     variableName;
        type    empiricalUpperAndLower;
            // [I = (1 + 2 * 10 ^ (0.5 * (pH_LL - pH_UL))) /
            //     (1 + 10 ^ (pH_var - pH_UL) + 10 ^ (pH_LL - pH_var))]
            pH_LL               coefficient;
            pH_UL               coefficient;
            pH_var or S_Hp_var  variableName;
        type    empiricalLowerSwitch;
            // [pH < pH_UL: I = exp(-3 * ((pH_var - pH_UL) / (pH_UL - pH_LL)) ^ 2
            //     pH >= pH_UL: 1]
            pH_LL               coefficient;
            pH_UL               coefficient;
            pH_var or S_Hp_var  variableName;
        type    empiricalLowerTanh;
            // [see wiki for equation]
            a                   coefficient;
            pH_LL               coefficient;
            pH_UL               coefficient;
            pH_var or S_Hp_var  variableName;
        type    empiricalLowerHill;
            // [see wiki for equation]
            n                   coefficient;
            pH_LL               coefficient;
            pH_UL               coefficient;
            pH_var or S_Hp_var  variableName;
        type    competitiveUptake;
            // [I = S_var / (S_var + S_I)]
            S_var   variableName;
            S_I     variableName;
        type    secondarySubstrate;
            // [I = S_I / (S_I + K_I)]
            S_I     variableName;
            K_I     coefficient;
        type    custom;
            function    "equation";
            Jacobian    // option
            {
                variableName    "equation";
                variableName    "equation";
                // etc...
            }
}
*/

// ************************************************************************* //
